#define yyFlexLexer Exa1FlexLexer

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        YY_RESTORE_YY_MORE_OFFSET \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

#include <iostream>

using std::istream;
using std::ostream;
using std::cin;
using std::cout;
using std::cerr;
struct yy_buffer_state
    {
    istream* yy_input_file;

    char *yy_ch_buf;		/* input buffer */
    char *yy_buf_pos;		/* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
    yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 107
#define YY_END_OF_BUFFER 108
static yyconst short int yy_acclist[557] =
    {   0,
      108,  106,  107,  102,  106,  107,   97,  107,   17,  106,
      107,  106,  107,   37,  106,  107,    5,  106,  107,   18,
      106,  107,  106,  107,   38,  106,  107,   39,  106,  107,
        3,  106,  107,    1,  106,  107,   44,  106,  107,    2,
      106,  107,   47,  106,  107,    4,  106,  107,   90,   92,
       94,  106,  107,   24,   94,  106,  107,   45,   94,  106,
      107,   10,   94,  106,  107,   25,   94,  106,  107,    9,
       94,  106,  107,   46,   94,  106,  107,   94,  106,  107,
       93,   94,  106,  107,   42,   94,  106,  107,   94,  106,
      107,   43,   94,  106,  107,   20,   94,  106,  107,   48,

       93,   94,  106,  107,   93,   94,  106,  107,   93,   94,
      106,  107,   93,   94,  106,  107,   93,   94,  106,  107,
       93,   94,  106,  107,   93,   94,  106,  107,   93,   94,
      106,  107,   93,   94,  106,  107,   93,   94,  106,  107,
       93,   94,  106,  107,   93,   94,  106,  107,   93,   94,
      106,  107,   93,  106,  107,   93,  106,  107,   93,  106,
      107,   40,  106,  107,   19,  106,  107,   41,  106,  107,
       21,  106,  107,  106,  107,  106,  107,  106,  107,  106,
      107,  106,  107,   90,   92,   94,  106,  107,   24,   94,
      106,  107,   45,   94,  106,  107,   10,   94,  106,  107,

       25,   94,  106,  107,    9,   94,  106,  107,   46,   94,
      106,  107,   94,  106,  107,   93,   94,  106,  107,   42,
       94,  106,  107,   94,  106,  107,   43,   94,  106,  107,
       20,   94,  106,  107,   48,   93,   94,  106,  107,   93,
       94,  106,  107,   93,   94,  106,  107,   93,   94,  106,
      107,   93,   94,  106,  107,   93,   94,  106,  107,   93,
       94,  106,  107,   93,   94,  106,  107,   93,   94,  106,
      107,   93,   94,  106,  107,   93,   94,  106,  107,   93,
       94,  106,  107,   93,   94,  106,  107,   93,  106,  107,
       93,  106,  107,   93,  106,  107,   14,   96,   31,   15,

       32,    6,   28,    7,   26,    8,   27,   49,   92,  103,
       30,   91,   90,   92,   22,   12,   13,   11,   23,   93,
       99,   98,   34,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   50,   93,   93,   58,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   33,   16,   95,
       90,   92,   22,   12,   13,   11,   23,   93,   95,   99,
       34,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       50,   93,   93,   58,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   96,   29,  103,   91,   92,
       35,   36,  101,  100,   93,   93,   93,   93,   93,   93,

       93,   56,   93,   93,   93,   82,   93,   93,   74,   93,
       76,   93,   87,   93,   93,   93,   93,   83,   93,   93,
       81,   59,   55,   79,   77,   92,   35,   36,   93,   93,
       93,   93,   93,   93,   93,   56,   93,   93,   93,   82,
       93,   93,   74,   93,   76,   93,   87,   93,   93,   93,
       93,   83,   93,   93,   91,   93,   93,   93,   93,   52,
       93,   69,   93,   93,   85,   93,   93,   61,   93,   93,
       93,   78,   93,   93,   93,   93,   93,   93,   52,   93,
       69,   93,   93,   85,   93,   93,   61,   93,   93,   93,
       78,   93,   93,   65,   93,   88,   93,   93,   71,   93,

       80,   93,   93,   93,   93,   54,   93,   65,   93,   88,
       93,   93,   71,   93,   80,   93,   93,   93,   93,   54,
       93,  105,  104,   93,   72,   93,   63,   93,   60,   93,
       86,   84,   53,   51,   89,   73,   62,   75,   70,   66,
       64,   93,   72,   93,   63,   93,   60,   93,   93,   93,
       67,   93,   67,   93,   68,   57
    } ;

static yyconst short int yy_accept[382] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   14,   17,
       20,   23,   25,   28,   31,   34,   37,   40,   43,   46,
       49,   54,   58,   62,   66,   70,   74,   78,   81,   85,
       89,   92,   96,  100,  105,  109,  113,  117,  121,  125,
      129,  133,  137,  141,  145,  149,  153,  156,  159,  162,
      165,  168,  171,  174,  176,  178,  180,  182,  184,  189,
      193,  197,  201,  205,  209,  213,  216,  220,  224,  227,
      231,  235,  240,  244,  248,  252,  256,  260,  264,  268,
      272,  276,  280,  284,  288,  291,  294,  297,  298,  298,
      299,  300,  301,  302,  302,  303,  304,  305,  306,  307,

      308,  309,  310,  311,  312,  313,  315,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  329,  330,  331,  332,  333,  335,  336,  338,  339,
      340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  351,  353,  353,
      353,  354,  355,  356,  357,  358,  359,  361,  362,  363,
      364,  365,  366,  367,  368,  369,  370,  371,  373,  374,
      376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
      386,  387,  387,  387,  388,  389,  390,  390,  390,  391,

      392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
      402,  404,  405,  406,  408,  409,  411,  413,  415,  416,
      417,  418,  420,  421,  421,  422,  422,  422,  422,  423,
      423,  423,  423,  424,  424,  424,  425,  426,  426,  426,
      426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
      436,  438,  439,  440,  442,  443,  445,  447,  449,  450,
      451,  452,  454,  455,  455,  455,  455,  455,  455,  456,
      457,  458,  459,  460,  462,  464,  465,  467,  468,  470,
      471,  472,  474,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  476,  477,  478,

      479,  481,  483,  484,  486,  487,  489,  490,  491,  493,
      494,  494,  494,  496,  498,  499,  501,  503,  504,  505,
      506,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  510,  512,  513,  515,  517,
      518,  519,  520,  522,  523,  524,  525,  527,  529,  531,
      531,  532,  533,  534,  535,  535,  536,  537,  538,  539,
      540,  541,  542,  543,  545,  547,  549,  550,  550,  550,
      551,  553,  553,  553,  555,  556,  556,  556,  556,  557,
      557
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   27,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       29,   30,   31,   32,   33,   26,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   27,   50,   51,   52,   53,   54,   55,   56,
       57,   57,   58,   59,   60,   61,    1,   62,   63,   64,
        1,    1,   65,    1,   66,   67,    1,    1,   68,    1,
        1,   69,   70,   71,    1,    1,   72,   73,   74,   75,
        1,   76,   77,    1,   78,   79,   80,   81,   82,    1,
       83,    1,    1,    1,   84,   85,    1,   86,   87,   88,
        1,   89,    1,    1,   90,   91,   92,    1,   93,    1,
        1,    1,   94,   95,   96,   97,   98,   99,  100,  101,
      102,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,  103,  104,  105,
      106,  107,  108,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[109] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    1,    1,    1,    1,    4,    1,    5,    6,
        6,    6,    6,    6,    6,    6,    5,    5,    6,    6,
        6,    6,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[388] =
    {   0,
        0,   90,  562,  563,  563,  563,  538,  554,  563,  536,
      139,  548,  563,  563,  136,  137,  563,  134,  538,  138,
      135,  563,  563,  142,  533,  143,  563,  563,    0,  563,
      165,  563,  532,    0,  504,  126,  515,  125,  138,  136,
      139,  138,  517,  513,  495,  499,  514,  506,    0,  563,
      130,  563,  563,  451,  122,  470,  111,  100,  196,  193,
      194,  197,  213,  214,  201,  218,  222,  223,  224,  246,
      247,  236,  494,  158,  505,  139,  221,  232,  234,  191,
      507,  503,  485,  489,  504,  496,    0,  563,  530,  529,
      563,  563,  563,  524,  510,  563,  563,  563,  563,  563,

      563,  256,    0,  563,  257,  264,  272,  509,  563,  563,
      563,  508,    0,  526,  526,  563,  490,  493,  479,  490,
      473,  481,  477,  471,  473,    0,  470,    0,  466,  469,
      461,  470,  471,  461,  470,  458,  460,  467,  563,  563,
      440,  441,  406,  429,  419,  417,  438,  109,  429,  412,
      408,  416,  400,  424,  402,  421,  563,  270,  287,  293,
      294,  296,  297,  298,  302,    0,  489,  303,  454,  457,
      443,  454,  437,  445,  441,  435,  437,    0,  434,    0,
      430,  433,  425,  434,  435,  425,  434,  422,  424,  431,
      563,  466,  461,  563,    0,  299,  307,  451,  450,  563,

      563,  563,  563,  434,  416,  414,  412,  426,  411,  411,
        0,  425,  412,    0,  410,    0,    0,    0,  405,  405,
      418,    0,  410,  351,  563,  348,  344,  347,  563,  345,
      221,  345,  563,  342,  343,  563,  563,  341,  341,  340,
      313,  319,  326,  409,  391,  389,  387,  401,  386,  386,
        0,  400,  387,    0,  385,    0,    0,    0,  380,  380,
      393,    0,  385,  423,  422,  417,  416,  406,  405,  379,
      371,  379,  380,    0,    0,  381,    0,  368,    0,  367,
      380,    0,  377,  319,  339,  346,  344,  329,  312,  316,
      342,  337,  307,  324,  337,  324,  357,  349,  357,  358,

        0,    0,  359,    0,  346,    0,  345,  358,    0,  355,
      386,  381,    0,    0,  343,    0,    0,  337,  341,  346,
        0,  324,  294,  314,  306,  303,  312,  297,  295,  288,
      271,  279,  260,  275,    0,    0,  304,    0,    0,  293,
      295,  300,    0,  334,  563,  286,    0,    0,    0,  233,
      563,  563,  563,  563,  230,  563,  563,  563,  563,  563,
      563,  563,  281,    0,    0,    0,  295,  242,  213,  255,
        0,  197,  207,    0,  563,  129,   84,   90,  563,  563,
      343,  150,  348,  353,  359,  365,  371
    } ;

static yyconst short int yy_def[388] =
    {   0,
      380,    1,  380,  380,  380,  380,  380,  381,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  382,  380,
      380,  380,  380,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  383,  383,
      383,  383,  383,  383,  383,  383,  384,  383,  383,  383,
      383,  384,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  380,  381,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  385,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  382,  380,  380,  380,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  383,  383,  383,
      383,  383,  383,  383,  383,   72,  380,  383,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
      380,  386,  387,  380,  385,  380,  380,  380,  380,  380,

      380,  380,  380,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      383,  383,  383,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  386,  386,  387,  380,  380,  380,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
      386,  380,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  386,  380,  382,  382,  382,  382,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,   72,   72,   72,   72,  382,  380,  380,   72,
      382,  380,  380,   72,  380,  380,  380,  380,  380,    0,
      380,  380,  380,  380,  380,  380,  380
    } ;

static yyconst short int yy_nxt[672] =
    {   0,
        4,    5,    6,    4,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   29,   30,   31,
       32,   33,   34,   29,   35,   36,   37,   38,   39,   29,
       29,   40,   29,   29,   41,   29,   42,   43,   29,   44,
       45,   46,   29,   47,   48,   49,   49,   50,   51,   52,
       53,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,   54,   55,   56,   57,   58,    4,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   67,   68,   69,
       70,   71,   72,   67,   73,   74,   75,   76,   77,   67,
       67,   78,   67,   67,   79,   67,   80,   81,   67,   82,
       83,   84,   67,   85,   86,   87,   87,   92,   95,   99,
       97,  105,  139,  106,  113,  103,  100,  101,   96,   98,
      104,   93,  107,  108,  109,  111,  112,  114,  115,  121,
      118,  123,  107,  119,  126,  131,  129,  379,  378,  132,
      122,  127,  128,  173,  142,  124,  130,  143,  140,  152,
      125,  144,  145,  155,  174,  157,  157,  153,  157,  157,

      146,  156,  170,  157,  231,  171,  147,  232,  154,  380,
      380,  148,  105,  380,  158,  157,  157,  380,  161,  162,
      157,  149,  150,  160,  157,  157,  167,  115,  183,  380,
      380,  377,  184,  160,  380,  163,  164,  165,  157,  380,
      380,  159,  159,  159,  159,  159,  159,  159,  157,  157,
      159,  159,  159,  159,  175,  159,  159,  159,  159,  159,
      159,  159,  380,  380,  159,  159,  159,  159,  176,  168,
      178,  181,  157,  177,  102,  196,  376,  179,  180,  375,
      105,  182,  106,  107,  197,  198,  105,  198,  158,  157,
      199,  107,  374,  107,  197,  157,  157,  160,  157,  157,

      157,  107,  373,  380,  157,  157,  198,  160,  198,  380,
      380,  241,  380,  380,  380,  157,  242,  196,  380,  380,
      268,  157,  268,  289,  243,  269,  197,  290,  157,  380,
      372,  241,  371,  370,  369,  380,  197,  368,  367,  344,
      366,  365,  380,   89,  364,   89,   89,   89,   89,  159,
      363,  159,  159,  159,  166,  362,  361,  166,  166,  195,
      360,  195,  195,  195,  195,  264,  264,  359,  264,  264,
      264,  266,  266,  266,  266,  266,  266,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,

      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  313,  269,  269,  312,  267,  311,  265,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  199,  199,
      267,  265,  263,  262,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  202,  240,  239,  238,  237,  236,  235,  234,

      233,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  194,  193,  192,  191,  190,  189,  188,  187,
      186,  185,  172,  169,  151,  141,  138,  137,  136,  135,
      134,  133,  120,  117,  116,  110,  102,   94,   91,   90,
       88,  380,    3,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380
    } ;

static yyconst short int yy_chk[672] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   11,   15,   18,
       16,   21,   51,   21,  382,   20,   18,   18,   15,   16,
       20,   11,   21,   24,   24,   26,   26,   31,   31,   38,
       36,   39,   21,   36,   40,   42,   41,  378,  377,   42,
       38,   40,   40,   76,   55,   39,   41,   55,   51,   57,
       39,   55,   55,   58,   76,   60,   61,   57,   59,   62,

       55,   58,   74,   65,  148,   74,   55,  148,   57,   60,
       61,   55,   59,   62,   59,   63,   64,   65,   62,   62,
       66,   55,   55,   59,   67,   68,   69,   69,   80,   63,
       64,  376,   80,   59,   66,   63,   64,   64,   72,   68,
       69,   67,   67,   67,   67,   67,   67,   67,   70,   71,
       67,   67,   67,   67,   77,   72,   72,   72,   72,   72,
       72,   72,   70,   71,   72,   72,   72,   72,   77,   71,
       78,   79,  158,   77,  102,  105,  373,   78,   78,  372,
      106,   79,  106,  102,  105,  107,  158,  107,  158,  159,
      107,  106,  370,  102,  105,  160,  161,  158,  162,  163,

      164,  106,  369,  159,  165,  168,  160,  158,  160,  160,
      161,  160,  162,  163,  164,  241,  161,  196,  165,  168,
      197,  242,  197,  231,  165,  197,  196,  231,  243,  241,
      368,  241,  367,  363,  355,  242,  196,  350,  346,  344,
      342,  341,  243,  381,  340,  381,  381,  381,  381,  383,
      337,  383,  383,  383,  384,  334,  333,  384,  384,  385,
      332,  385,  385,  385,  385,  386,  386,  331,  386,  386,
      386,  387,  387,  387,  387,  387,  387,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  320,  319,  318,  315,
      312,  311,  310,  308,  307,  305,  303,  300,  299,  298,

      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  281,  280,  278,  276,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      261,  260,  259,  255,  253,  252,  250,  249,  248,  247,
      246,  245,  244,  240,  239,  238,  235,  234,  232,  230,
      228,  227,  226,  224,  223,  221,  220,  219,  215,  213,
      212,  210,  209,  208,  207,  206,  205,  204,  199,  198,
      193,  192,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  179,  177,  176,  175,  174,  173,  172,  171,
      170,  169,  167,  156,  155,  154,  153,  152,  151,  150,

      149,  147,  146,  145,  144,  143,  142,  141,  138,  137,
      136,  135,  134,  133,  132,  131,  130,  129,  127,  125,
      124,  123,  122,  121,  120,  119,  118,  117,  115,  114,
      112,  108,   95,   94,   90,   89,   86,   85,   84,   83,
       82,   81,   75,   73,   56,   54,   48,   47,   46,   45,
       44,   43,   37,   35,   33,   25,   19,   12,   10,    8,
        7,    3,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#define INITIAL 0

#include "Exa1Scanner.h"
#include <stdio.h>
#include <stdlib.h>
#include "Spring.h"


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
    if ( yyleng > 0 ) \
        yy_current_buffer->yy_at_bol = \
                (yytext[yyleng - 1] == '\n'); \
    YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;



    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;	/* first start state */

        if ( ! yyin )
            yyin = &cin;

        if ( ! yyout )
            yyout = &cout;

        if ( ! yy_current_buffer )
            yy_current_buffer =
                yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )		/* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start;
        yy_current_state += YY_AT_BOL();
        yy_state_ptr = yy_state_buf;
        *yy_state_ptr++ = yy_current_state;
yy_match:
        do
            {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 381 )
                    yy_c = yy_meta[(unsigned int) yy_c];
                }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
            *yy_state_ptr++ = yy_current_state;
            ++yy_cp;
            }
        while ( yy_base[yy_current_state] != 563 );

yy_find_action:
        yy_current_state = *--yy_state_ptr;
        yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
        for ( ; ; ) /* until we find what rule we matched */
            {
            if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
                {
                yy_act = yy_acclist[yy_lp];
                    {
                    yy_full_match = yy_cp;
                    break;
                    }
                }
            --yy_cp;
            yy_current_state = *--yy_state_ptr;
            yy_lp = yy_accept[yy_current_state];
            }

        YY_DO_BEFORE_ACTION;

        if ( yy_act != YY_END_OF_BUFFER )
            {
            int yyl;
            for ( yyl = 0; yyl < yyleng; ++yyl )
                if ( yytext[yyl] == '\n' )
                    ++yylineno;
            }

do_action:	/* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */
case 1:
case 2:
case 3:
case 4:
case 5:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(); 		return yytext[0]; }
    YY_BREAK
case 6:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::EXP; }
    YY_BREAK
case 7:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::INCREMENT; }
    YY_BREAK
case 8:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::DECREMENT; }
    YY_BREAK
case 9:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return TOKENS::CMP_G; }
    YY_BREAK
case 10:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return TOKENS::CMP_L; }
    YY_BREAK
case 11:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::CMP_GE; }
    YY_BREAK
case 12:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::CMP_LE; }
    YY_BREAK
case 13:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::CMP_E; }
    YY_BREAK
case 14:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::CMP_NE; }
    YY_BREAK
case 15:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::LOGICAL_AND; }
    YY_BREAK
case 16:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::LOGICAL_OR; }
    YY_BREAK
case 17:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return TOKENS::LOGICAL_NOT; }
    YY_BREAK
case 18:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return TOKENS::BIT_AND; }
    YY_BREAK
case 19:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return TOKENS::BIT_OR; }
    YY_BREAK
case 20:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return TOKENS::BIT_XOR; }
    YY_BREAK
case 21:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return TOKENS::BIT_COM; }
    YY_BREAK
case 22:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::BIT_SHIFT_LEFT; }
    YY_BREAK
case 23:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		return TOKENS::BIT_SHIFT_RIGHT; }
    YY_BREAK
case 24:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return ':'; }
    YY_BREAK
case 25:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns();		return '='; }
    YY_BREAK
case 26:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 219; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 27:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 220; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 28:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 221; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 29:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(3);		yylval->m_Int = 222; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 30:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 223; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 31:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 224; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 32:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 225; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 33:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 226; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 34:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(2);		yylval->m_Int = 227; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 35:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(3);		yylval->m_Int = 228; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 36:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(3);		yylval->m_Int = 229; return TOKENS::COM_ASSIGN; }
    YY_BREAK
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns();	return yytext[0]; }
    YY_BREAK
case 49:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(2);	return TOKENS::ARROW; }
    YY_BREAK
case 50:
case 51:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::IF; }
    YY_BREAK
case 52:
case 53:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::ELSE; }
    YY_BREAK
case 54:
case 55:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::WHILE; }
    YY_BREAK
case 56:
case 57:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::FOR; }
    YY_BREAK
case 58:
case 59:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::IN; }
    YY_BREAK
case 60:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::SWITCH; }
    YY_BREAK
case 61:
case 62:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::LOOP; }
    YY_BREAK
case 63:
case 64:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::RETURN; }
    YY_BREAK
case 65:
case 66:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::BREAK; }
    YY_BREAK
case 67:
case 68:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::CONTINUE; }
    YY_BREAK
case 69:
case 70:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::EXIT; }
    YY_BREAK
case 71:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::DEBUG; }
    YY_BREAK
case 72:
case 73:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::USING; }
    YY_BREAK
case 74:
case 75:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::NEW; }
    YY_BREAK
case 76:
case 77:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::NIL; }
    YY_BREAK
case 78:
case 79:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::TRUE; }
    YY_BREAK
case 80:
case 81:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::FALSE; }
    YY_BREAK
case 82:
case 83:
case 84:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::LET; }
    YY_BREAK
case 85:
case 86:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::FUNC; }
    YY_BREAK
case 87:
case 88:
case 89:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext));	return TOKENS::OBJECT; }
    YY_BREAK
case 90:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext)); 				yylval->m_Int = atoi(yytext); 	return TOKENS::T_INT;}
    YY_BREAK
case 91:
case 92:
YY_RULE_SETUP
{ yylloc->step(); yylloc->columns(strlen(yytext)); 	yylval->m_Double = atof(yytext); return TOKENS::REAL;}
    YY_BREAK
case 93:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    yylloc->step(); yylloc->columns(len);
    yylval->m_id = (char *)malloc((len+1)*sizeof(char));
    strcpy(yylval->m_id, yytext);
    return TOKENS::ID;
}
    YY_BREAK
case 94:
YY_RULE_SETUP
{
    std::cout << "发现中文了";
    int len = strlen(yytext);
    yylloc->step(); yylloc->columns(len);
}
    YY_BREAK
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
    std::cout << "发现中文";
    int len = strlen(yytext);
    yylloc->step(); yylloc->columns(len);
}
    YY_BREAK
case 96:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    yylval->m_id = (char *)malloc((len+1)*sizeof(char));
    strcpy(yylval->m_id, yytext);
    yylloc->step(); yylloc->columns(len);
    return TOKENS::STRING;
}
    YY_BREAK
case 97:
YY_RULE_SETUP
{ yylloc->step(); yylloc->lines();		return TOKENS::EOL; }
    YY_BREAK
case 98:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->lines(); }
    YY_BREAK
case 99:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->lines(); }
    YY_BREAK
case 100:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->lines(); }
    YY_BREAK
case 101:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->lines(); }
    YY_BREAK
case 102:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(1); }
    YY_BREAK
case 103:
YY_RULE_SETUP
{ yylloc->step(); 	yylloc->columns(strlen(yytext)); }
    YY_BREAK
case 104:
case 105:
YY_RULE_SETUP
{
    yylloc->step();
    std::string str = yytext;
    unsigned nCount = std::count(std::begin(str), std::end(str), '\n');
    unsigned lastLineCol = str.length();
    if(nCount != 0)
        lastLineCol = lastLineCol - str.find_last_of('\n') - 1;
    yylloc->lines(nCount);
    yylloc->columns(lastLineCol);
    //qDebug() << yytext;
}
    YY_BREAK
case 106:
YY_RULE_SETUP
{
    yylloc->step();
    yylloc->columns(strlen(yytext));
//    std::string tip(yytext);
//    tip = "Unknown character: " + tip;
//    std::cout << tip;
    /*if(Spring::springIOHelper != nullptr)
        Spring::springIOHelper->onError(SpringErrorCode::SPRING_ERROR_LEXICAL_ERROR, tip, lineno());*/
}
    YY_BREAK
case 107:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
    YY_BREAK
            case YY_STATE_EOF(INITIAL):
                yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;
        YY_RESTORE_YY_MORE_OFFSET

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
                yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
    {
    yyin = arg_yyin;
    yyout = arg_yyout;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_flex_debug = 0;
    yylineno = 1;	// this will only get updated if %option yylineno

    yy_did_buffer_switch_on_eof = 0;

    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;
    yy_more_offset = yy_prev_more_offset = 0;

    yy_start_stack_ptr = yy_start_stack_depth = 0;
    yy_start_stack = 0;

    yy_current_buffer = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
    }

yyFlexLexer::~yyFlexLexer()
    {
    delete yy_state_buf;
    yy_delete_buffer( yy_current_buffer );
    }

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
    {
    if ( new_in )
        {
        yy_delete_buffer( yy_current_buffer );
        yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
        }

    if ( new_out )
        yyout = new_out;
    }

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
    {
    if ( yyin->eof() || yyin->fail() )
        return 0;

#ifdef YY_INTERACTIVE
    yyin->get( buf[0] );

    if ( yyin->eof() )
        return 0;

    if ( yyin->bad() )
        return -1;

    return 1;

#else
    (void) yyin->read( buf, max_size );

    if ( yyin->bad() )
        return -1;
    else
        return yyin->gcount();
#endif
    }

void yyFlexLexer::LexerOutput( const char* buf, int size )
    {
    (void) yyout->write( buf, size );
    }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_current_buffer->yy_n_chars = yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );

        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = yy_start;
    yy_current_state += YY_AT_BOL();
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
            {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 381 )
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *yy_state_ptr++ = yy_current_state;
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    {
    register int yy_is_jam;

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 381 )
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 380);
    if ( ! yy_is_jam )
        *yy_state_ptr++ = yy_current_state;

    return yy_is_jam ? 0 : yy_current_state;
    }


void yyFlexLexer::yyunput( int c, register char* yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_current_buffer->yy_n_chars =
            yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

    if ( c == '\n' )
        --yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }


int yyFlexLexer::yyinput()
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            int offset = yy_c_buf_p - yytext_ptr;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart( yyin );

                    /* fall through */

                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        return EOF;

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + offset;
                    break;
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
    *yy_c_buf_p = '\0';	/* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

    yy_current_buffer->yy_at_bol = (c == '\n');
    if ( yy_current_buffer->yy_at_bol )
        ++yylineno;

    return c;
    }


void yyFlexLexer::yyrestart( istream* input_file )
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


void yyFlexLexer::yy_load_buffer_state()
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
    }


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
    {
    cerr << msg << '\n';
    exit( YY_EXIT_FAILURE );
    }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
    {
    register int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif

/*由于我们在Exa1Scanner.h中重新定义了YYDDECL，因此在此处必须对Exa1FlexLexer::yylex()给予定义*/
int Exa1FlexLexer::yylex()
{
    std::cout << "can not use Exa1FlexLexer::yylex()" << std::endl;
    return 0;
}
