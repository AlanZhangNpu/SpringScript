clear()
import os

func main(){
	nQueen : 8
	table : [0] * nQueen
	ids : [0,1,2,3,4,5,6,7]

	print("solutions:")

	solutionId : 1
	solutionNum : 0

	printTable : func(table) {
		
		solutionNum = solutionNum + 1
		//return
		
		//print ("Solution ", solutionId, "**************************")
		//solutionId = solutionId + 1

		'''printTable'''
		print ("Solution ", solutionId, "**************************")
		solutionId = solutionId + 1
		
		row : [""] * nQueen
		let colId
		for colId in table {
			row[colId] = "Q"
			print (row)
			row[colId] = ""
		}
		print ("")
	}

	func searchRow(currentRowId) {
		if currentRowId == nQueen {
			printTable(table)
			return
		}
		
		let i, attack, previouscurrentRowId
		for i in ids {
			table[currentRowId] = i
			attack = false
			previouscurrentRowId = 0
			while previouscurrentRowId < currentRowId {
				if (table[currentRowId] == table[previouscurrentRowId]) || (currentRowId - previouscurrentRowId) == (table[currentRowId] - table[previouscurrentRowId]) || (currentRowId - previouscurrentRowId == table[previouscurrentRowId] - table[currentRowId]) {
					attack = true
					break
				}
				previouscurrentRowId = previouscurrentRowId + 1
			}
			
			if !attack {
				//recusive
				searchRow(currentRowId + 1)
			}
		}
		
		return
	}

	searchRow(0)
	//clear()
	print ("complete")
	
}

startTime : os.clock()
main()
print("time: ", os.clock() - startTime)

//clear()
