import os

start : os.clock()

N_row : 4
N_col : 5

func initTable(){
	print("initTable")
	let table = []
	loop N_row {
		table = table + [[0] * N_col]
		//print(t)
	}
	return table
}

func move(x, y, table, n){
	rowx : table[x]
	rowx[y] = n
	n = n + 1
	if n == N_col * N_row + 1 {
		printTable(n, table)
		return
	}else{
		getNextSteps(x,y,table)

		for step in nextSteps {
			newTable : new table
			move(step[0], step[1], newTable, n)
		}
	}
}

func isOk(x, y, table, result) {
	if x < 0  || y < 0 || x >= N_row || y >= N_col {
		result[0] = false
	}else{
		rowx : table[x]
		if rowx[y] != 0 {
			result[0] =  false
		}else{
			result[0] =  true
		}
	}
}

nextSteps : []
func getNextSteps(x, y, table) {
	nextSteps = []
	result : [false]
	
	isOk(x + 2, y + 1, table, result)
	if result[0] { nextSteps = nextSteps + [[x + 2, y + 1]]; }
	
	isOk(x - 1, y + 2, table, result)
	if result[0] { nextSteps = nextSteps + [[x - 1, y + 2]]; }
	
	isOk(x + 2, y - 1, table, result)
	if result[0] { nextSteps = nextSteps + [[x + 2, y - 1]]; }
	
	isOk(x - 2, y + 1, table, result)
	if result[0] { nextSteps = nextSteps + [[x - 2, y + 1]]; }
	
	isOk(x - 2, y - 1, table, result)
	if result[0]{ nextSteps = nextSteps + [[x - 2, y - 1]]; }
	
	isOk(x + 1, y + 2, table, result)
	if result[0] { nextSteps = nextSteps + [[x + 1, y + 2]]; }
	
	isOk(x + 1, y - 2, table, result)
	if result[0] { nextSteps = nextSteps + [[x + 1, y - 2]]; }
	
	isOk(x - 1, y - 2, table, result)
	if result[0] { nextSteps = nextSteps + [[x - 1, y - 2]]; }

	return nextSteps
}

solutionNum : 0
func printTable(n, table){

	solutionNum = solutionNum + 1
	let row
	
	print(">>>>>>>>>>>>>>>>>>>>>", solutionNum)
	for row in table{
		print(row)
	}
	print("")
}

move(0,0,initTable(), 1)
print("time: ", os.clock() - start)


